{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rober\\\\dev\\\\artifice\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport './App.css';\nimport Home from \"./home\";\nimport Game from \"./game\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      page: 'home',\n      joinError: '',\n      clientID: '',\n      partyCode: '',\n      username: '',\n      allPlayers: [],\n      playerInfo: {\n        isDead: false,\n        role: '',\n        team: ''\n      }\n    };\n  }\n  joinGame(isHost, username, partyCode) {\n    let ws = new WebSocket(\"ws://localhost:8000\");\n    ws.onmessage = message => {\n      const response = JSON.parse(message.data);\n\n      // Connected to server\n      if (response.method === \"connect\") {\n        // Save generated client ID\n        this.setState({\n          clientID: response.clientID\n        });\n\n        // Send the room connection request to the server\n        let payLoad;\n        if (isHost) {\n          // Host Party\n          payLoad = {\n            method: 'host',\n            clientID: response.clientID,\n            username: username\n          };\n        } else {\n          // Join Party\n          payLoad = {\n            method: 'join',\n            clientID: response.clientID,\n            partyCode: partyCode,\n            username: username\n          };\n        }\n        ws.send(JSON.stringify(payLoad));\n      }\n\n      // Joined Game Party\n      else if (response.method === \"partyConnect\") {\n        // Update State\n        this.setState({\n          page: 'game',\n          partyCode: response.partyCode,\n          username: username,\n          allPlayers: response.players\n        });\n      }\n\n      // Party Join Error\n      else if (response.method === \"partyJoinError\") {\n        this.setState({\n          joinError: response.errorMsg\n        });\n      } else if (response.method === \"updatePlayerList\") {\n        this.setState({\n          allPlayers: response.players\n        });\n      }\n    };\n  }\n  render() {\n    let content;\n    if (this.state.page === 'home') {\n      content = /*#__PURE__*/_jsxDEV(Home, {\n        joinGame: (isHost, partyCode, username) => this.joinGame(isHost, partyCode, username),\n        joinErrMsg: this.state.joinError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 23\n      }, this);\n    } else if (this.state.page === 'game') {\n      content = /*#__PURE__*/_jsxDEV(Game, {\n        partyCode: this.state.partyCode,\n        username: this.state.username,\n        players: this.state.allPlayers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 23\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Home","Game","App","constructor","state","page","joinError","clientID","partyCode","username","allPlayers","playerInfo","isDead","role","team","joinGame","isHost","ws","WebSocket","onmessage","message","response","JSON","parse","data","method","setState","payLoad","send","stringify","players","errorMsg","render","content"],"sources":["C:/Users/rober/dev/artifice/client/src/App.js"],"sourcesContent":["import React, { Component} from \"react\";\nimport './App.css';\nimport Home from \"./home\";\nimport Game from \"./game\";\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            page: 'home',\n            joinError: '',\n            clientID: '',\n            partyCode: '',\n            username: '',\n            allPlayers: [],\n            playerInfo: {\n                isDead: false,\n                role: '',\n                team: ''\n            }\n        }\n    }\n\n    joinGame(isHost, username, partyCode) {\n        let ws = new WebSocket(\"ws://localhost:8000\");\n\n        ws.onmessage = message => {\n            const response = JSON.parse(message.data);\n\n            // Connected to server\n            if(response.method === \"connect\") {\n                // Save generated client ID\n                this.setState({\n                    clientID: response.clientID\n                })\n\n                // Send the room connection request to the server\n                let payLoad;\n                if(isHost) {\n                    // Host Party\n                    payLoad = {\n                        method: 'host',\n                        clientID: response.clientID,\n                        username: username\n                    }\n                } else {\n                    // Join Party\n                    payLoad = {\n                        method: 'join',\n                        clientID: response.clientID,\n                        partyCode: partyCode,\n                        username: username\n                    }\n                }\n                ws.send(JSON.stringify(payLoad));\n            }\n\n            // Joined Game Party\n            else if(response.method === \"partyConnect\") {\n                // Update State\n                this.setState({\n                    page: 'game',\n                    partyCode: response.partyCode,\n                    username: username,\n                    allPlayers: response.players\n                })\n            }\n\n            // Party Join Error\n            else if(response.method === \"partyJoinError\") {\n                this.setState({\n                    joinError: response.errorMsg\n                })\n            }\n\n            else if(response.method === \"updatePlayerList\") {\n                this.setState({\n                    allPlayers: response.players\n                })\n            }\n        }\n    }\n\n    render() { \n        let content;\n        if(this.state.page === 'home') {\n            content = <Home \n                        joinGame={(isHost, partyCode, username) => this.joinGame(isHost, partyCode, username)} \n                        joinErrMsg={this.state.joinError}\n                    />\n        } else if(this.state.page === 'game') {\n            content = <Game \n                        partyCode={this.state.partyCode}\n                        username={this.state.username}\n                        players={this.state.allPlayers} \n                    />\n        }\n\n        return (\n            <div>\n                {content}\n            </div>\n        );\n    }\n}\n \nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}