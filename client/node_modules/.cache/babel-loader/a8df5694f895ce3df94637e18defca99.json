{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rober\\\\dev\\\\artifice\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport Home from \"./home\";\nimport Game from \"./game\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      page: 'home',\n      clientID: '',\n      partyCode: '',\n      username: ''\n    };\n  }\n  joinGame(isHost, username, partyCode) {\n    let ws = new WebSocket(\"ws://localhost:8000\");\n    ws.onopen = () => {\n      console.log(\"websocket client connected\");\n    };\n    ws.onmessage = message => {\n      const response = JSON.parse(message.data);\n\n      // Connected to server\n      if (response.method === \"connect\") {\n        // Save generated client ID\n        this.setState({\n          clientID: response.clientID\n        });\n\n        // Send the room connection request to the server\n        if (isHost) {\n          // Host Party\n          ws.send(JSON.stringify({\n            method: 'hostParty',\n            clientID: response.clientID,\n            username: username\n          }));\n        } else {\n          // Join Party\n          ws.send(JSON.stringify({\n            method: 'joinParty',\n            clientID: response.clientID,\n            partyCode: partyCode,\n            username: username\n          }));\n        }\n      }\n\n      // Joined Game Party\n      if (response.method === \"partyConnect\") {\n        // Update State\n        this.setState({\n          page: 'game',\n          clientID: response.clientID,\n          partyCode: response.partyCode,\n          username: username\n        });\n      }\n    };\n  }\n  render() {\n    let content;\n    if (this.state.page === 'home') {\n      content = /*#__PURE__*/_jsxDEV(Home, {\n        joinGame: (partyCode, username) => this.joinGame(partyCode, username)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 23\n      }, this);\n    } else if (this.state.page === 'game') {\n      content = /*#__PURE__*/_jsxDEV(Game, {\n        clientID: this.state.clientID,\n        partyCode: this.state.partyCode,\n        username: this.state.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 23\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Artifice\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), content]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Home","Game","App","constructor","state","page","clientID","partyCode","username","joinGame","isHost","ws","WebSocket","onopen","console","log","onmessage","message","response","JSON","parse","data","method","setState","send","stringify","render","content"],"sources":["C:/Users/rober/dev/artifice/client/src/App.js"],"sourcesContent":["import React, { Component} from \"react\";\nimport Home from \"./home\";\nimport Game from \"./game\";\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            page: 'home',\n            clientID: '',\n            partyCode: '',\n            username: '',\n        }\n    }\n\n    joinGame(isHost, username, partyCode) {\n        let ws = new WebSocket(\"ws://localhost:8000\");\n\n        ws.onopen = () => {\n            console.log(\"websocket client connected\");\n        };\n\n        ws.onmessage = message => {\n            const response = JSON.parse(message.data);\n\n            // Connected to server\n            if(response.method === \"connect\") {\n                // Save generated client ID\n                this.setState({\n                    clientID: response.clientID\n                })\n\n                // Send the room connection request to the server\n                if(isHost) {\n                    // Host Party\n                    ws.send(JSON.stringify({\n                        method: 'hostParty',\n                        clientID: response.clientID,\n                        username: username\n                    }))\n                } else {\n                    // Join Party\n                    ws.send(JSON.stringify({\n                        method: 'joinParty',\n                        clientID: response.clientID,\n                        partyCode: partyCode,\n                        username: username\n                    }))\n                }\n            }\n\n            // Joined Game Party\n            if(response.method === \"partyConnect\") {\n                // Update State\n                this.setState({\n                    page: 'game',\n                    clientID: response.clientID,\n                    partyCode: response.partyCode,\n                    username: username\n                })\n            }\n        }\n    }\n\n    render() { \n        let content;\n        if(this.state.page === 'home') {\n            content = <Home joinGame={(partyCode, username) => this.joinGame(partyCode, username)} />\n        } else if(this.state.page === 'game') {\n            content = <Game clientID={this.state.clientID} partyCode={this.state.partyCode} username={this.state.username} />\n        }\n\n        return (\n            <div>\n                <h1>Artifice</h1>\n                {content}\n            </div>\n        );\n    }\n}\n \nexport default App;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAO,OAAO;AACvC,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,IAAI,MAAM,QAAQ;AAAC;AAE1B,MAAMC,GAAG,SAASH,SAAS,CAAC;EACxBI,WAAW,GAAG;IACV,KAAK,EAAE;IACP,IAAI,CAACC,KAAK,GAAG;MACTC,IAAI,EAAE,MAAM;MACZC,QAAQ,EAAE,EAAE;MACZC,SAAS,EAAE,EAAE;MACbC,QAAQ,EAAE;IACd,CAAC;EACL;EAEAC,QAAQ,CAACC,MAAM,EAAEF,QAAQ,EAAED,SAAS,EAAE;IAClC,IAAII,EAAE,GAAG,IAAIC,SAAS,CAAC,qBAAqB,CAAC;IAE7CD,EAAE,CAACE,MAAM,GAAG,MAAM;MACdC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IAC7C,CAAC;IAEDJ,EAAE,CAACK,SAAS,GAAGC,OAAO,IAAI;MACtB,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC;;MAEzC;MACA,IAAGH,QAAQ,CAACI,MAAM,KAAK,SAAS,EAAE;QAC9B;QACA,IAAI,CAACC,QAAQ,CAAC;UACVjB,QAAQ,EAAEY,QAAQ,CAACZ;QACvB,CAAC,CAAC;;QAEF;QACA,IAAGI,MAAM,EAAE;UACP;UACAC,EAAE,CAACa,IAAI,CAACL,IAAI,CAACM,SAAS,CAAC;YACnBH,MAAM,EAAE,WAAW;YACnBhB,QAAQ,EAAEY,QAAQ,CAACZ,QAAQ;YAC3BE,QAAQ,EAAEA;UACd,CAAC,CAAC,CAAC;QACP,CAAC,MAAM;UACH;UACAG,EAAE,CAACa,IAAI,CAACL,IAAI,CAACM,SAAS,CAAC;YACnBH,MAAM,EAAE,WAAW;YACnBhB,QAAQ,EAAEY,QAAQ,CAACZ,QAAQ;YAC3BC,SAAS,EAAEA,SAAS;YACpBC,QAAQ,EAAEA;UACd,CAAC,CAAC,CAAC;QACP;MACJ;;MAEA;MACA,IAAGU,QAAQ,CAACI,MAAM,KAAK,cAAc,EAAE;QACnC;QACA,IAAI,CAACC,QAAQ,CAAC;UACVlB,IAAI,EAAE,MAAM;UACZC,QAAQ,EAAEY,QAAQ,CAACZ,QAAQ;UAC3BC,SAAS,EAAEW,QAAQ,CAACX,SAAS;UAC7BC,QAAQ,EAAEA;QACd,CAAC,CAAC;MACN;IACJ,CAAC;EACL;EAEAkB,MAAM,GAAG;IACL,IAAIC,OAAO;IACX,IAAG,IAAI,CAACvB,KAAK,CAACC,IAAI,KAAK,MAAM,EAAE;MAC3BsB,OAAO,gBAAG,QAAC,IAAI;QAAC,QAAQ,EAAE,CAACpB,SAAS,EAAEC,QAAQ,KAAK,IAAI,CAACC,QAAQ,CAACF,SAAS,EAAEC,QAAQ;MAAE;QAAA;QAAA;QAAA;MAAA,QAAG;IAC7F,CAAC,MAAM,IAAG,IAAI,CAACJ,KAAK,CAACC,IAAI,KAAK,MAAM,EAAE;MAClCsB,OAAO,gBAAG,QAAC,IAAI;QAAC,QAAQ,EAAE,IAAI,CAACvB,KAAK,CAACE,QAAS;QAAC,SAAS,EAAE,IAAI,CAACF,KAAK,CAACG,SAAU;QAAC,QAAQ,EAAE,IAAI,CAACH,KAAK,CAACI;MAAS;QAAA;QAAA;QAAA;MAAA,QAAG;IACrH;IAEA,oBACI;MAAA,wBACI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAiB,EAChBmB,OAAO;IAAA;MAAA;MAAA;MAAA;IAAA,QACN;EAEd;AACJ;AAEA,eAAezB,GAAG"},"metadata":{},"sourceType":"module"}