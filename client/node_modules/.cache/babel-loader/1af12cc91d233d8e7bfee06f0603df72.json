{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rober\\\\dev\\\\artifice\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport './App.css';\nimport Home from \"./home\";\nimport Game from \"./game\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      page: 'home',\n      ws: '',\n      joinError: '',\n      isHost: false,\n      gameStarted: false,\n      clientID: '',\n      partyCode: '',\n      username: '',\n      allPlayers: [],\n      playerInfo: {\n        isDead: false,\n        role: '',\n        roleDescription: '',\n        team: ''\n      }\n    };\n    this.startGame = this.startGame.bind(this);\n    this.joinGame = this.joinGame.bind(this);\n  }\n  startGame() {\n    let payLoad = {\n      method: 'start',\n      partyCode: this.state.partyCode,\n      isHost: this.state.isHost,\n      clientID: this.state.clientID\n    };\n    this.state.ws.send(JSON.stringify(payLoad));\n  }\n  joinGame(err, isHost, username, partyCode) {\n    if (err.type === 'join') {\n      this.setState({\n        joinError: err.msg\n      });\n      return;\n    }\n    let ws = new WebSocket(\"ws://localhost:8000\");\n    this.setState({\n      ws: ws\n    });\n    ws.onmessage = message => {\n      const response = JSON.parse(message.data);\n\n      // Connected to server\n      if (response.method === \"connect\") {\n        // Save generated client ID\n        this.setState({\n          clientID: response.clientID\n        });\n\n        // Send the room connection request to the server\n        let payLoad;\n        if (isHost) {\n          // Host Party\n          payLoad = {\n            method: 'host',\n            clientID: response.clientID,\n            username: username\n          };\n        } else {\n          // Join Party\n          payLoad = {\n            method: 'join',\n            clientID: response.clientID,\n            partyCode: partyCode,\n            username: username\n          };\n        }\n        ws.send(JSON.stringify(payLoad));\n      }\n\n      // Joined Game Party\n      else if (response.method === \"partyConnect\") {\n        // Update State\n        this.setState({\n          page: 'game',\n          partyCode: response.partyCode,\n          username: username,\n          allPlayers: response.players,\n          isHost: response.isHost\n        });\n      }\n\n      // Party Join Error\n      else if (response.method === \"partyJoinError\") {\n        this.setState({\n          joinError: response.errorMsg\n        });\n      }\n\n      // Update player list\n      else if (response.method === \"updatePlayerList\") {\n        this.setState({\n          allPlayers: response.players\n        });\n      }\n\n      // Role assigned\n      else if (response.method === \"role\") {\n        this.setState({\n          playerInfo: {\n            isDead: false,\n            role: response.role,\n            roleDescription: response.roleDescription,\n            team: response.team\n          }\n        });\n      }\n    };\n  }\n  render() {\n    let content;\n    if (this.state.page === 'home') {\n      content = /*#__PURE__*/_jsxDEV(Home, {\n        joinGame: (err, isHost, partyCode, username) => this.joinGame(err, isHost, partyCode, username),\n        joinErrMsg: this.state.joinError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 23\n      }, this);\n    } else if (this.state.page === 'game') {\n      content = /*#__PURE__*/_jsxDEV(Game, {\n        partyCode: this.state.partyCode,\n        username: this.state.username,\n        playerInfo: this.state.playerInfo,\n        players: this.state.allPlayers,\n        isHost: this.state.isHost,\n        gameStarted: this.state.gameStarted,\n        startGame: this.startGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 23\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Home","Game","App","constructor","state","page","ws","joinError","isHost","gameStarted","clientID","partyCode","username","allPlayers","playerInfo","isDead","role","roleDescription","team","startGame","bind","joinGame","payLoad","method","send","JSON","stringify","err","type","setState","msg","WebSocket","onmessage","message","response","parse","data","players","errorMsg","render","content"],"sources":["C:/Users/rober/dev/artifice/client/src/App.js"],"sourcesContent":["import React, { Component} from \"react\";\nimport './App.css';\nimport Home from \"./home\";\nimport Game from \"./game\";\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            page: 'home',\n            ws: '',\n            joinError: '',\n            isHost: false,\n            gameStarted: false,\n            clientID: '',\n            partyCode: '',\n            username: '',\n            allPlayers: [],\n            playerInfo: {\n                isDead: false,\n                role: '',\n                roleDescription: '',\n                team: ''\n            }\n        }\n\n        this.startGame = this.startGame.bind(this);\n        this.joinGame = this.joinGame.bind(this);\n    }\n\n    startGame() {\n        let payLoad = {\n            method: 'start',\n            partyCode: this.state.partyCode,\n            isHost: this.state.isHost,\n            clientID: this.state.clientID,\n        }\n\n        this.state.ws.send(JSON.stringify(payLoad));\n    }\n\n    joinGame(err, isHost, username, partyCode) {\n        if(err.type === 'join') {\n            this.setState({\n                joinError: err.msg\n            })\n            return\n        }\n        let ws = new WebSocket(\"ws://localhost:8000\");\n\n        this.setState({\n            ws: ws\n        })\n\n        ws.onmessage = message => {\n            const response = JSON.parse(message.data);\n\n            // Connected to server\n            if(response.method === \"connect\") {\n                // Save generated client ID\n                this.setState({\n                    clientID: response.clientID\n                })\n\n                // Send the room connection request to the server\n                let payLoad;\n                if(isHost) {\n                    // Host Party\n                    payLoad = {\n                        method: 'host',\n                        clientID: response.clientID,\n                        username: username\n                    }\n                } else {\n                    // Join Party\n                    payLoad = {\n                        method: 'join',\n                        clientID: response.clientID,\n                        partyCode: partyCode,\n                        username: username\n                    }\n                }\n                ws.send(JSON.stringify(payLoad));\n            }\n\n            // Joined Game Party\n            else if(response.method === \"partyConnect\") {\n                // Update State\n                this.setState({\n                    page: 'game',\n                    partyCode: response.partyCode,\n                    username: username,\n                    allPlayers: response.players,\n                    isHost: response.isHost\n                })\n            }\n\n            // Party Join Error\n            else if(response.method === \"partyJoinError\") {\n                this.setState({\n                    joinError: response.errorMsg\n                })\n            }\n\n            // Update player list\n            else if(response.method === \"updatePlayerList\") {\n                this.setState({\n                    allPlayers: response.players\n                })\n            }\n\n            // Role assigned\n            else if(response.method === \"role\") {\n                this.setState({\n                    playerInfo: {\n                        isDead: false,\n                        role: response.role,\n                        roleDescription: response.roleDescription,\n                        team: response.team\n                    }\n                })\n            }\n        }\n    }\n\n    render() { \n        let content;\n        if(this.state.page === 'home') {\n            content = <Home \n                        joinGame={(err, isHost, partyCode, username) => this.joinGame(err, isHost, partyCode, username)} \n                        joinErrMsg={this.state.joinError}\n                    />\n        } else if(this.state.page === 'game') {\n            content = <Game \n                        partyCode={this.state.partyCode}\n                        username={this.state.username}\n                        playerInfo={this.state.playerInfo}\n                        players={this.state.allPlayers}\n                        isHost={this.state.isHost}\n                        gameStarted={this.state.gameStarted}\n                        startGame={this.startGame}\n                    />\n        }\n\n        return (\n            <div>\n                {content}\n            </div>\n        );\n    }\n}\n \nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}