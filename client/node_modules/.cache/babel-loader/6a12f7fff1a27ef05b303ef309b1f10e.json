{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rober\\\\dev\\\\artifice\\\\client\\\\src\\\\components\\\\joinParty.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass JoinParty extends React.Component {\n  constructor(props) {\n    super(props);\n    this.errorMsgStyle = {\n      margin: 0,\n      color: 'red'\n    };\n    this.state = {\n      partyCode: '',\n      username: ''\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n  joinParty(_joinGame) {\n    let inputName = this.state.username.trim();\n    if (this.state.partyCode === '') {\n      _joinGame({\n        type: 'join',\n        msg: 'party code is required'\n      }, false, \"\", \"\");\n      return;\n    }\n    if (inputName === '') {\n      _joinGame({\n        type: 'join',\n        msg: 'username is required'\n      }, false, \"\", \"\");\n      return;\n    }\n    let letterNumber = /^[0-9a-zA-Z]+$/;\n    if (!inputName.match(letterNumber)) {\n      _joinGame({\n        type: 'join',\n        msg: 'username can only be letters and numbers'\n      }, false, \"\", \"\");\n      return;\n    }\n    if (inputName.length > 15) {\n      this.setState({\n        errorMsg: \"username must be less than 15 characters\"\n      });\n      return;\n    }\n    let isHost = false;\n    _joinGame({\n      type: 'none'\n    }, isHost, inputName, this.state.partyCode);\n  }\n  handleInputChange(evet) {\n    const target = event.target;\n    const name = target.name;\n    this.setState({\n      [name]: target.value\n    });\n  }\n  render() {\n    let inputError = '';\n    if (this.props.joinEnrrorMsg !== '') {\n      inputError = /*#__PURE__*/_jsxDEV(\"p\", {\n        style: this.errorMsgStyle,\n        children: this.props.joinErrMsg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 26\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Party Code:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"partyCode\",\n          value: this.state.partyCode,\n          onChange: this.handleInputChange,\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"username\",\n          value: this.state.username,\n          onChange: this.handleInputChange,\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), inputError, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.joinParty(this.props.joinGame),\n        children: \"Join Party\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.props.backClick,\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default JoinParty;","map":{"version":3,"names":["React","JoinParty","Component","constructor","props","errorMsgStyle","margin","color","state","partyCode","username","handleInputChange","bind","joinParty","_joinGame","inputName","trim","type","msg","letterNumber","match","length","setState","errorMsg","isHost","evet","target","event","name","value","render","inputError","joinEnrrorMsg","joinErrMsg","joinGame","backClick"],"sources":["C:/Users/rober/dev/artifice/client/src/components/joinParty.jsx"],"sourcesContent":["import React from 'react';\r\n\r\nclass JoinParty extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            partyCode: '',\r\n            username: '',\r\n        }\r\n\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n    }\r\n\r\n    errorMsgStyle = {\r\n        margin: 0,\r\n        color: 'red'\r\n    }\r\n    \r\n    joinParty(_joinGame) {\r\n        let inputName = this.state.username.trim();\r\n        \r\n        if(this.state.partyCode === '') {\r\n            _joinGame({type: 'join', msg: 'party code is required'}, false, \"\", \"\");\r\n            return;\r\n        }\r\n\r\n        if(inputName === '') {\r\n            _joinGame({type: 'join', msg: 'username is required'}, false, \"\", \"\");\r\n            return;\r\n        }\r\n\r\n        let letterNumber = /^[0-9a-zA-Z]+$/;\r\n        if(!(inputName.match(letterNumber))) {\r\n            _joinGame({type: 'join', msg: 'username can only be letters and numbers'}, false, \"\", \"\");\r\n            return;\r\n        }\r\n\r\n        if(inputName.length > 15) {\r\n            this.setState({errorMsg: \"username must be less than 15 characters\"});\r\n            return;\r\n        }\r\n\r\n        let isHost = false;\r\n        _joinGame({type: 'none'}, isHost, inputName, this.state.partyCode);\r\n    }\r\n\r\n    handleInputChange(evet) {\r\n        const target = event.target;\r\n        const name = target.name;\r\n        this.setState({\r\n            [name]: target.value,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let inputError = '';\r\n        if (this.props.joinEnrrorMsg !== '') {\r\n            inputError = <p style={this.errorMsgStyle}>{this.props.joinErrMsg}</p>\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <label>\r\n                    Party Code:\r\n                    <input \r\n                        type=\"text\" \r\n                        name=\"partyCode\" \r\n                        value={this.state.partyCode} \r\n                        onChange={this.handleInputChange}\r\n                        autoComplete=\"off\"\r\n                    />\r\n                </label>\r\n                \r\n                <br/>\r\n\r\n                <label>\r\n                    Name:\r\n                    <input \r\n                        type=\"text\" \r\n                        name=\"username\" \r\n                        value={this.state.username} \r\n                        onChange={this.handleInputChange}\r\n                        autoComplete=\"off\"\r\n                    />\r\n                </label>\r\n                \r\n                <br/>\r\n\r\n                {inputError}\r\n\r\n                <button onClick={() => this.joinParty(this.props.joinGame)}>Join Party</button>\r\n\r\n                <br/>\r\n\r\n                <button onClick={this.props.backClick}>Back</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default JoinParty;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC;AAE1B,MAAMC,SAAS,SAASD,KAAK,CAACE,SAAS;EACnCC,WAAW,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IAAC,KAUjBC,aAAa,GAAG;MACZC,MAAM,EAAE,CAAC;MACTC,KAAK,EAAE;IACX,CAAC;IAXG,IAAI,CAACC,KAAK,GAAG;MACTC,SAAS,EAAE,EAAE;MACbC,QAAQ,EAAE;IACd,CAAC;IAED,IAAI,CAACC,iBAAiB,GAAG,IAAI,CAACA,iBAAiB,CAACC,IAAI,CAAC,IAAI,CAAC;EAC9D;EAOAC,SAAS,CAACC,SAAS,EAAE;IACjB,IAAIC,SAAS,GAAG,IAAI,CAACP,KAAK,CAACE,QAAQ,CAACM,IAAI,EAAE;IAE1C,IAAG,IAAI,CAACR,KAAK,CAACC,SAAS,KAAK,EAAE,EAAE;MAC5BK,SAAS,CAAC;QAACG,IAAI,EAAE,MAAM;QAAEC,GAAG,EAAE;MAAwB,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,CAAC;MACvE;IACJ;IAEA,IAAGH,SAAS,KAAK,EAAE,EAAE;MACjBD,SAAS,CAAC;QAACG,IAAI,EAAE,MAAM;QAAEC,GAAG,EAAE;MAAsB,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,CAAC;MACrE;IACJ;IAEA,IAAIC,YAAY,GAAG,gBAAgB;IACnC,IAAG,CAAEJ,SAAS,CAACK,KAAK,CAACD,YAAY,CAAE,EAAE;MACjCL,SAAS,CAAC;QAACG,IAAI,EAAE,MAAM;QAAEC,GAAG,EAAE;MAA0C,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,CAAC;MACzF;IACJ;IAEA,IAAGH,SAAS,CAACM,MAAM,GAAG,EAAE,EAAE;MACtB,IAAI,CAACC,QAAQ,CAAC;QAACC,QAAQ,EAAE;MAA0C,CAAC,CAAC;MACrE;IACJ;IAEA,IAAIC,MAAM,GAAG,KAAK;IAClBV,SAAS,CAAC;MAACG,IAAI,EAAE;IAAM,CAAC,EAAEO,MAAM,EAAET,SAAS,EAAE,IAAI,CAACP,KAAK,CAACC,SAAS,CAAC;EACtE;EAEAE,iBAAiB,CAACc,IAAI,EAAE;IACpB,MAAMC,MAAM,GAAGC,KAAK,CAACD,MAAM;IAC3B,MAAME,IAAI,GAAGF,MAAM,CAACE,IAAI;IACxB,IAAI,CAACN,QAAQ,CAAC;MACV,CAACM,IAAI,GAAGF,MAAM,CAACG;IACnB,CAAC,CAAC;EACN;EAEAC,MAAM,GAAG;IACL,IAAIC,UAAU,GAAG,EAAE;IACnB,IAAI,IAAI,CAAC3B,KAAK,CAAC4B,aAAa,KAAK,EAAE,EAAE;MACjCD,UAAU,gBAAG;QAAG,KAAK,EAAE,IAAI,CAAC1B,aAAc;QAAA,UAAE,IAAI,CAACD,KAAK,CAAC6B;MAAU;QAAA;QAAA;QAAA;MAAA,QAAK;IAC1E;IAEA,oBACI;MAAA,wBACI;QAAA,uCAEI;UACI,IAAI,EAAC,MAAM;UACX,IAAI,EAAC,WAAW;UAChB,KAAK,EAAE,IAAI,CAACzB,KAAK,CAACC,SAAU;UAC5B,QAAQ,EAAE,IAAI,CAACE,iBAAkB;UACjC,YAAY,EAAC;QAAK;UAAA;UAAA;UAAA;QAAA,QACpB;MAAA;QAAA;QAAA;QAAA;MAAA,QACE,eAER;QAAA;QAAA;QAAA;MAAA,QAAK,eAEL;QAAA,iCAEI;UACI,IAAI,EAAC,MAAM;UACX,IAAI,EAAC,UAAU;UACf,KAAK,EAAE,IAAI,CAACH,KAAK,CAACE,QAAS;UAC3B,QAAQ,EAAE,IAAI,CAACC,iBAAkB;UACjC,YAAY,EAAC;QAAK;UAAA;UAAA;UAAA;QAAA,QACpB;MAAA;QAAA;QAAA;QAAA;MAAA,QACE,eAER;QAAA;QAAA;QAAA;MAAA,QAAK,EAEJoB,UAAU,eAEX;QAAQ,OAAO,EAAE,MAAM,IAAI,CAAClB,SAAS,CAAC,IAAI,CAACT,KAAK,CAAC8B,QAAQ,CAAE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAoB,eAE/E;QAAA;QAAA;QAAA;MAAA,QAAK,eAEL;QAAQ,OAAO,EAAE,IAAI,CAAC9B,KAAK,CAAC+B,SAAU;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAc;IAAA;MAAA;MAAA;MAAA;IAAA,QAClD;EAEd;AACJ;AAEA,eAAelC,SAAS"},"metadata":{},"sourceType":"module"}