{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rober\\\\dev\\\\artifice\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport './App.css';\nimport Home from \"./home\";\nimport Game from \"./game\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      page: 'home',\n      ws: '',\n      joinError: '',\n      isHost: false,\n      gameStarted: false,\n      clientID: '',\n      partyCode: '',\n      username: '',\n      allPlayers: [],\n      votedFor: '',\n      defendant: '',\n      defenseOutcome: {\n        isDead: false,\n        yesVotes: 0,\n        noVotes: 0\n      },\n      demonChatMsgs: [],\n      playerInfo: {\n        isDead: false,\n        role: '',\n        roleDescription: '',\n        team: ''\n      },\n      logs: [],\n      phase: '',\n      day: 0,\n      timer: 0,\n      gameOver: false,\n      teamWinners: '',\n      playerWinners: '',\n      usedSelf: false\n    };\n    this.startGame = this.startGame.bind(this);\n    this.joinGame = this.joinGame.bind(this);\n  }\n  roleTarget(method, target) {\n    this.setState({\n      votedFor: target\n    });\n    let payLoad = {\n      method: method,\n      gameID: this.state.partyCode,\n      clientID: this.state.clientID,\n      voteTarget: target\n    };\n    this.state.ws.send(JSON.stringify(payLoad));\n  }\n  defenseVote(voteType) {\n    this.setState({\n      votedFor: voteType\n    });\n    let payLoad = {\n      method: 'defensevote',\n      gameID: this.state.partyCode,\n      clientID: this.state.clientID,\n      voteType: voteType\n    };\n    this.state.ws.send(JSON.stringify(payLoad));\n  }\n  vote(voteTarget) {\n    this.setState({\n      votedFor: voteTarget\n    });\n    let payLoad = {\n      method: 'vote',\n      gameID: this.state.partyCode,\n      clientID: this.state.clientID,\n      voteTarget: voteTarget\n    };\n    this.state.ws.send(JSON.stringify(payLoad));\n  }\n  demonChatMessage(message) {\n    let payLoad = {\n      method: 'demonchat',\n      username: this.state.username,\n      gameID: this.state.partyCode,\n      message: message\n    };\n    this.state.ws.send(JSON.stringify(payLoad));\n  }\n  startGame() {\n    let payLoad = {\n      method: 'start',\n      partyCode: this.state.partyCode,\n      isHost: this.state.isHost,\n      clientID: this.state.clientID\n    };\n    this.state.ws.send(JSON.stringify(payLoad));\n  }\n  joinGame(err, isHost, username, partyCode) {\n    partyCode = partyCode.trim();\n    if (err.type === 'join') {\n      this.setState({\n        joinError: err.msg\n      });\n      return;\n    }\n    let ws = new WebSocket(\"ws://localhost:8000\");\n    this.setState({\n      ws: ws\n    });\n    ws.onmessage = message => {\n      const response = JSON.parse(message.data);\n\n      // Connected to server\n      if (response.method === \"connect\") {\n        // Save generated client ID\n        this.setState({\n          clientID: response.clientID\n        });\n\n        // Send the room connection request to the server\n        let payLoad;\n        if (isHost) {\n          // Host Party\n          payLoad = {\n            method: 'host',\n            clientID: response.clientID,\n            username: username\n          };\n        } else {\n          // Join Party\n          payLoad = {\n            method: 'join',\n            clientID: response.clientID,\n            partyCode: partyCode,\n            username: username\n          };\n        }\n        ws.send(JSON.stringify(payLoad));\n      }\n\n      // Joined Game Party\n      else if (response.method === \"partyConnect\") {\n        // Update State\n        this.setState({\n          page: 'game',\n          partyCode: response.partyCode,\n          username: username,\n          allPlayers: response.players,\n          isHost: response.isHost\n        });\n      }\n\n      // Party Join Error\n      else if (response.method === \"partyJoinError\") {\n        this.setState({\n          joinError: response.errorMsg\n        });\n      }\n\n      // Update player list\n      else if (response.method === \"updatePlayerList\") {\n        this.setState({\n          allPlayers: response.players\n        });\n      }\n\n      // Game started\n      else if (response.method === \"gamestart\") {\n        this.setState({\n          gameStarted: response.gameStarted,\n          demonChatMsgs: []\n        });\n      }\n\n      // Role assigned\n      else if (response.method === \"role\") {\n        this.setState({\n          playerInfo: {\n            isDead: false,\n            role: response.role,\n            roleDescription: response.roleDescription,\n            team: response.team\n          },\n          votedFor: '',\n          defendant: '',\n          defenseOutcome: {\n            isDead: false,\n            yesVotes: 0,\n            noVotes: 0\n          },\n          demonChatMsgs: [],\n          logs: [],\n          phase: '',\n          day: 0,\n          timer: 0,\n          gameOver: false,\n          teamWinners: '',\n          playerWinners: '',\n          usedSelf: false\n        });\n      } else if (response.method === \"gamestate\") {\n        this.setState({\n          phase: response.phase,\n          day: response.day\n        });\n        if (this.state.phase === \"discussion\") {\n          this.setState({\n            defendant: ''\n          });\n        }\n      } else if (response.method === \"timer\") {\n        this.setState({\n          timer: response.timer\n        });\n      } else if (response.method === \"demonchatmsg\") {\n        let newArray = this.state.demonChatMsgs.concat([response.data]);\n        this.setState({\n          demonChatMsgs: newArray\n        });\n      } else if (response.method === \"defendant\") {\n        this.setState({\n          defendant: response.username\n        });\n      } else if (response.method === \"defenseoutcome\") {\n        this.setState({\n          defenseOutcome: {\n            isDead: response.isDead,\n            yesVotes: response.yesVotes,\n            noVotes: response.noVotes\n          }\n        });\n      } else if (response.method === \"log\") {\n        let logMsg = response.log;\n        let type = response.logType;\n        let newArray = this.state.logs.concat([{\n          msg: logMsg,\n          type: type,\n          time: 'Day ' + this.state.day\n        }]);\n        this.setState({\n          logs: newArray\n        });\n\n        // doctor self heal\n        if (this.state.playerInfo.role === 'Doctor' && type === 'doctor' && this.state.votedFor === username) {\n          this.setState({\n            usedSelf: true\n          });\n        }\n      } else if (response.method === \"death\") {\n        let newPlayerInfo = this.state.playerInfo;\n        newPlayerInfo.isDead = response.isDead;\n        this.setState({\n          playerInfo: newPlayerInfo\n        });\n      } else if (response.method === \"gameover\") {\n        let newPlayerInfo = this.state.playerInfo;\n        newPlayerInfo.isDead = response.isDead;\n        this.setState({\n          gameOver: true,\n          teamWinners: response.teamWinners,\n          playerWinners: response.playerWinners\n        });\n      }\n    };\n  }\n  render() {\n    let content;\n    if (this.state.page === 'home') {\n      content = /*#__PURE__*/_jsxDEV(Home, {\n        joinGame: (err, isHost, partyCode, username) => this.joinGame(err, isHost, partyCode, username),\n        joinErrMsg: this.state.joinError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 23\n      }, this);\n    } else if (this.state.page === 'game') {\n      content = /*#__PURE__*/_jsxDEV(Game, {\n        partyCode: this.state.partyCode,\n        username: this.state.username,\n        playerInfo: this.state.playerInfo,\n        players: this.state.allPlayers,\n        isHost: this.state.isHost,\n        gameStarted: this.state.gameStarted,\n        startGame: this.startGame,\n        phase: this.state.phase,\n        day: this.state.day,\n        timer: this.state.timer,\n        defendant: this.state.defendant,\n        demonChatMsgs: this.state.demonChatMsgs,\n        demonChatMessage: message => this.demonChatMessage(message),\n        logs: this.state.logs,\n        vote: voteTarget => this.vote(voteTarget),\n        defenseVote: voteType => this.defenseVote(voteType),\n        defenseOutcome: this.state.defenseOutcome,\n        roleTarget: (method, target) => this.roleTarget(method, target),\n        usedSelf: this.state.usedSelf,\n        gameOver: this.state.gameOver,\n        teamWinners: this.state.teamWinners,\n        playerWinners: this.state.playerWinners\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 23\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Home","Game","App","constructor","state","page","ws","joinError","isHost","gameStarted","clientID","partyCode","username","allPlayers","votedFor","defendant","defenseOutcome","isDead","yesVotes","noVotes","demonChatMsgs","playerInfo","role","roleDescription","team","logs","phase","day","timer","gameOver","teamWinners","playerWinners","usedSelf","startGame","bind","joinGame","roleTarget","method","target","setState","payLoad","gameID","voteTarget","send","JSON","stringify","defenseVote","voteType","vote","demonChatMessage","message","err","trim","type","msg","WebSocket","onmessage","response","parse","data","players","errorMsg","newArray","concat","logMsg","log","logType","time","newPlayerInfo","render","content"],"sources":["C:/Users/rober/dev/artifice/client/src/App.js"],"sourcesContent":["import React, { Component} from \"react\";\nimport './App.css';\nimport Home from \"./home\";\nimport Game from \"./game\";\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            page: 'home',\n            ws: '',\n            joinError: '',\n            isHost: false,\n            gameStarted: false,\n            clientID: '',\n            partyCode: '',\n            username: '',\n            allPlayers: [],\n            votedFor: '',\n            defendant: '',\n            defenseOutcome: {\n                isDead: false,\n                yesVotes: 0,\n                noVotes: 0\n            },\n            demonChatMsgs: [],\n            playerInfo: {\n                isDead: false,\n                role: '',\n                roleDescription: '',\n                team: ''\n            },\n            logs: [],\n            phase: '',\n            day: 0,\n            timer: 0,\n            gameOver: false,\n            teamWinners: '',\n            playerWinners: '',\n            usedSelf: false\n        }\n\n        this.startGame = this.startGame.bind(this);\n        this.joinGame = this.joinGame.bind(this);\n    }\n\n    roleTarget(method, target) {\n        this.setState({\n            votedFor: target\n        })\n\n        let payLoad = {\n            method: method,\n            gameID: this.state.partyCode,\n            clientID: this.state.clientID,\n            voteTarget: target\n        }\n\n        this.state.ws.send(JSON.stringify(payLoad));\n    }\n\n    defenseVote(voteType) {\n        this.setState({\n            votedFor: voteType\n        })\n\n        let payLoad = {\n            method: 'defensevote',\n            gameID: this.state.partyCode,\n            clientID: this.state.clientID,\n            voteType: voteType\n        }\n\n        this.state.ws.send(JSON.stringify(payLoad));\n    }\n\n    vote(voteTarget) {\n        this.setState({\n            votedFor: voteTarget\n        })\n\n        let payLoad = {\n            method: 'vote',\n            gameID: this.state.partyCode,\n            clientID: this.state.clientID,\n            voteTarget: voteTarget\n        }\n\n        this.state.ws.send(JSON.stringify(payLoad));\n    }\n\n    demonChatMessage(message) {\n        let payLoad = {\n            method: 'demonchat',\n            username: this.state.username,\n            gameID: this.state.partyCode,\n            message: message\n        }\n\n        this.state.ws.send(JSON.stringify(payLoad));\n    }\n\n    startGame() {\n        let payLoad = {\n            method: 'start',\n            partyCode: this.state.partyCode,\n            isHost: this.state.isHost,\n            clientID: this.state.clientID,\n        }\n\n        this.state.ws.send(JSON.stringify(payLoad));\n    }\n\n    joinGame(err, isHost, username, partyCode) {\n        partyCode = partyCode.trim();\n        if(err.type === 'join') {\n            this.setState({\n                joinError: err.msg\n            })\n            return\n        }\n        let ws = new WebSocket(\"ws://localhost:8000\");\n\n        this.setState({\n            ws: ws\n        })\n\n        ws.onmessage = message => {\n            const response = JSON.parse(message.data);\n\n            // Connected to server\n            if(response.method === \"connect\") {\n                // Save generated client ID\n                this.setState({\n                    clientID: response.clientID\n                })\n\n                // Send the room connection request to the server\n                let payLoad;\n                if(isHost) {\n                    // Host Party\n                    payLoad = {\n                        method: 'host',\n                        clientID: response.clientID,\n                        username: username\n                    }\n                } else {\n                    // Join Party\n                    payLoad = {\n                        method: 'join',\n                        clientID: response.clientID,\n                        partyCode: partyCode,\n                        username: username\n                    }\n                }\n                ws.send(JSON.stringify(payLoad));\n            }\n\n            // Joined Game Party\n            else if(response.method === \"partyConnect\") {\n                // Update State\n                this.setState({\n                    page: 'game',\n                    partyCode: response.partyCode,\n                    username: username,\n                    allPlayers: response.players,\n                    isHost: response.isHost\n                })\n            }\n\n            // Party Join Error\n            else if(response.method === \"partyJoinError\") {\n                this.setState({\n                    joinError: response.errorMsg\n                })\n            }\n\n            // Update player list\n            else if(response.method === \"updatePlayerList\") {\n                this.setState({\n                    allPlayers: response.players\n                })\n            }\n\n            // Game started\n            else if(response.method === \"gamestart\") {\n                this.setState({\n                    gameStarted: response.gameStarted,\n                    demonChatMsgs: []\n                })\n            }\n\n            // Role assigned\n            else if(response.method === \"role\") {\n                this.setState({\n                    playerInfo: {\n                        isDead: false,\n                        role: response.role,\n                        roleDescription: response.roleDescription,\n                        team: response.team\n                    },\n                    votedFor: '',\n                    defendant: '',\n                    defenseOutcome: {\n                        isDead: false,\n                        yesVotes: 0,\n                        noVotes: 0\n                    },\n                    demonChatMsgs: [],\n                    logs: [],\n                    phase: '',\n                    day: 0,\n                    timer: 0,\n                    gameOver: false,\n                    teamWinners: '',\n                    playerWinners: '',\n                    usedSelf: false\n                })\n            }\n\n            else if(response.method === \"gamestate\") {\n                this.setState({\n                    phase: response.phase,\n                    day: response.day\n                })\n\n                if(this.state.phase === \"discussion\") {\n                    this.setState({\n                        defendant: ''\n                    })\n                }\n            }\n\n            else if(response.method === \"timer\") {\n                this.setState({\n                    timer: response.timer\n                })\n            }\n\n            else if(response.method === \"demonchatmsg\") {\n                let newArray = this.state.demonChatMsgs.concat([response.data])\n                this.setState({\n                    demonChatMsgs: newArray\n                })\n            }\n\n            else if(response.method === \"defendant\") {\n                this.setState({\n                    defendant: response.username\n                })\n            }\n\n            else if(response.method === \"defenseoutcome\") {\n                this.setState({\n                    defenseOutcome: {\n                        isDead: response.isDead,\n                        yesVotes: response.yesVotes,\n                        noVotes: response.noVotes\n                    }\n                })\n            }\n\n            else if(response.method === \"log\") {\n                let logMsg = response.log;\n                let type = response.logType;\n                let newArray = this.state.logs.concat([{\n                    msg: logMsg,\n                    type: type,\n                    time: 'Day ' +this.state.day,\n                }])\n                this.setState({\n                    logs: newArray\n                })\n\n                // doctor self heal\n                if(this.state.playerInfo.role === 'Doctor' && type === 'doctor' && this.state.votedFor === username){\n                    this.setState({\n                        usedSelf: true\n                    })\n                }\n            }\n\n            else if(response.method === \"death\") {\n                let newPlayerInfo = this.state.playerInfo;\n                newPlayerInfo.isDead = response.isDead;\n                this.setState({\n                    playerInfo: newPlayerInfo\n                })\n            }\n\n            else if(response.method === \"gameover\") {\n                let newPlayerInfo = this.state.playerInfo;\n                newPlayerInfo.isDead = response.isDead;\n                this.setState({\n                    gameOver: true,\n                    teamWinners: response.teamWinners,\n                    playerWinners: response.playerWinners\n                })\n            }\n            \n        }\n    }\n\n    render() { \n        let content;\n        if(this.state.page === 'home') {\n            content = <Home \n                        joinGame={(err, isHost, partyCode, username) => this.joinGame(err, isHost, partyCode, username)} \n                        joinErrMsg={this.state.joinError}\n                    />\n        } else if(this.state.page === 'game') {\n            content = <Game \n                        partyCode={this.state.partyCode}\n                        username={this.state.username}\n                        playerInfo={this.state.playerInfo}\n                        players={this.state.allPlayers}\n                        isHost={this.state.isHost}\n                        gameStarted={this.state.gameStarted}\n                        startGame={this.startGame}\n                        phase={this.state.phase}\n                        day={this.state.day}\n                        timer={this.state.timer}\n                        defendant={this.state.defendant}\n                        demonChatMsgs={this.state.demonChatMsgs}\n                        demonChatMessage={(message) => this.demonChatMessage(message)}\n                        logs={this.state.logs}\n                        vote={(voteTarget) => this.vote(voteTarget)}\n                        defenseVote={(voteType) => this.defenseVote(voteType)}\n                        defenseOutcome={this.state.defenseOutcome}\n                        roleTarget={(method, target) => this.roleTarget(method, target)}\n                        usedSelf={this.state.usedSelf}\n                        gameOver={this.state.gameOver}\n                        teamWinners={this.state.teamWinners}\n                        playerWinners={this.state.playerWinners}\n                    />\n        }\n\n        return (\n            <div>\n                {content}\n            </div>\n        );\n    }\n}\n \nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}